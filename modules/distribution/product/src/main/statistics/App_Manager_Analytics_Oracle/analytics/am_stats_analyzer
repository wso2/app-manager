CREATE EXTERNAL TABLE IF NOT EXISTS APIRequestData (key STRING,api STRING,
	api_version STRING,consumerKey STRING,userId STRING,
	context STRING,version STRING, request INT, requestTime BIGINT, resource STRING, method STRING, hostName STRING, apiPublisher STRING) STORED BY 
	'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2BAM_CASSANDRA_DATASOURCE',
	"cassandra.cf.name" = "org.wso2.appmgt.statistics.request",
	"cassandra.columns.mapping" = ":key,payload_api, payload_api_version,payload_consumerKey,payload_userId,payload_context,payload_version, payload_request, payload_requestTime, payload_resource, payload_method,payload_hostName,payload_apiPublisher" );   


CREATE EXTERNAL TABLE IF NOT EXISTS APIRequestSummaryData (api STRING, api_version STRING, version STRING, apiPublisher STRING,
	consumerKey STRING,userId STRING,context STRING, max_request_time BIGINT,
	total_request_count INT, hostName STRING,year SMALLINT,month SMALLINT,day SMALLINT, time STRING) STORED BY 
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2AM_STATS_DB',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,time',
	'hive.jdbc.table.create.query' = 'CREATE TABLE API_REQUEST_SUMMARY ( api VARCHAR2(100), api_version VARCHAR2(100), version VARCHAR2(100),
	apiPublisher VARCHAR2(100),consumerKey VARCHAR2(100),userId VARCHAR2(100), context VARCHAR2(100),max_request_time NUMBER, total_request_count INT, hostName VARCHAR2(100), year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR2(30),PRIMARY KEY(api,api_version,apiPublisher,consumerKey,userId,context,hostName,time))' );

insert overwrite table APIRequestSummaryData select api, api_version,version, apiPublisher, consumerKey,userId,context,max(requestTime) as max_request_time,sum(request) as total_request_count,hostName,  year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,concat(substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from APIRequestData group by api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);


CREATE EXTERNAL TABLE IF NOT EXISTS APIVersionUsageSummaryData ( api STRING, version STRING, apiPublisher STRING,context STRING,total_request_count INT, hostName STRING,year SMALLINT,month SMALLINT,day SMALLINT, time STRING) STORED BY   'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2AM_STATS_DB',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='api,version,apiPublisher,context,hostName,time',
	'hive.jdbc.table.create.query' = 'CREATE TABLE API_VERSION_USAGE_SUMMARY ( api VARCHAR2(100), version VARCHAR2(100),apiPublisher VARCHAR2(100),context VARCHAR2(100),
	total_request_count INT,hostName VARCHAR2(100), year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR2(30), PRIMARY KEY(api,version,apiPublisher,context,hostName,time))' );
	
	
insert overwrite table APIVersionUsageSummaryData select api,version,apiPublisher,context,sum(request) as total_request_count,hostName,  year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,concat(substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from APIRequestData group by api,version,apiPublisher,context,hostName,year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);


CREATE EXTERNAL TABLE IF NOT EXISTS APIResourcePathUsageSummaryData ( api STRING, version STRING,apiPublisher STRING,context STRING, method STRING, total_request_count INT ,hostName STRING,year SMALLINT,month SMALLINT,day SMALLINT, time STRING) STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES 
	( 'wso2.carbon.datasource.name'='WSO2AM_STATS_DB',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='api,version,apiPublisher,context,method,hostName,time',
	'hive.jdbc.table.create.query' = 'CREATE TABLE API_Resource_USAGE_SUMMARY ( api VARCHAR2(100), version VARCHAR2(100),apiPublisher VARCHAR2(100),context VARCHAR2(100),
	method VARCHAR2(100), total_request_count INT, hostName VARCHAR2(100), year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR2(30), PRIMARY KEY(api,version,apiPublisher,context,method,time))' );
	
	
insert overwrite table APIResourcePathUsageSummaryData select api,version,apiPublisher,context,method,sum(request),hostName as total_request_count, year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,concat(substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from APIRequestData group by api,version,apiPublisher,context,method,hostName,year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);



CREATE EXTERNAL TABLE IF NOT EXISTS APIResponseData (key STRING,
	api_version STRING,apiPublisher STRING,context STRING,serviceTime BIGINT,
	response INT,hostName STRING,responseTime BIGINT) STORED BY 
	'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES ('wso2.carbon.datasource.name'='WSO2BAM_CASSANDRA_DATASOURCE',
	"cassandra.cf.name" = "org_wso2_apimgt_statistics_response",
	"cassandra.columns.mapping" = ":key,payload_api_version,payload_apiPublisher,payload_context,payload_serviceTime,payload_response,payload_hostName,payload_responseTime" );  
	
	
CREATE EXTERNAL TABLE IF NOT EXISTS APIResponseSummaryData (api_version STRING,apiPublisher STRING,context STRING,serviceTime INT,total_response_count INT,hostName STRING,year SMALLINT,month SMALLINT,day SMALLINT, time STRING) STORED BY 
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2AM_STATS_DB',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='api_version,apiPublisher,context,hostName,time',
	'hive.jdbc.table.create.query' = 'CREATE TABLE API_RESPONSE_SUMMARY ( api_version VARCHAR2(100),apiPublisher VARCHAR2(100),
	context VARCHAR2(100),serviceTime INT,total_response_count INT,hostName VARCHAR2(100), year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR2(30), PRIMARY KEY(api_version,apiPublisher,context,hostName,time))' );
	
	
insert overwrite table APIResponseSummaryData select api_version,apiPublisher,context, avg(serviceTime) as avg_service_time,sum(response) as total_response_count, hostName, year(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,concat(substring(from_unixtime(cast(responseTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from APIResponseData group by api_version,apiPublisher,context,hostName,year(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(responseTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(responseTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);


CREATE EXTERNAL TABLE IF NOT EXISTS APIFaultData (key STRING,
	api STRING,version STRING,apiPublisher STRING,context STRING, errorCode STRING,
	errorMessage STRING, requestTime STRING, hostName STRING) STORED BY 
	'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2BAM_CASSANDRA_DATASOURCE',
	"cassandra.cf.name" = "org_wso2_apimgt_statistics_fault",
	"cassandra.columns.mapping" = ":key,payload_api, payload_version,payload_apiPublisher,payload_context,payload_errorCode,payload_errorMessage,payload_requestTime,payload_hostName" ); 


CREATE EXTERNAL TABLE IF NOT EXISTS APIFaultSummaryData (api STRING, version STRING,apiPublisher STRING,context STRING, total_fault_count INT, hostName STRING, year SMALLINT,month SMALLINT,day SMALLINT, time STRING) STORED BY 
	'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2AM_STATS_DB',
	'hive.jdbc.update.on.duplicate' = 'true',
	'hive.jdbc.primary.key.fields'='api,version,apiPublisher,context,hostName,time',
	'hive.jdbc.table.create.query' = 'CREATE TABLE API_FAULT_SUMMARY ( api VARCHAR2(100), version VARCHAR2(100),apiPublisher VARCHAR2(100),context VARCHAR2(100),
	total_fault_count INT, hostName VARCHAR2(100), year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR2(30), PRIMARY KEY(api,version,apiPublisher,context,hostName,time))' );
	
insert overwrite table APIFaultSummaryData select api,version,apiPublisher,context,count(errorMessage) as total_fault_count,hostName, year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,concat(substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time from APIFaultData group by api,version,apiPublisher,context,hostName,year(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(requestTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(requestTime/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);


CREATE EXTERNAL TABLE IF NOT EXISTS APPMGR_APP_HIT_TOTAL_TEMP (key STRING,uuid STRING,
	user_id STRING,tenant_id INT) STORED BY 
	'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES ( 'wso2.carbon.datasource.name'='WSO2BAM_CASSANDRA_DATASOURCE',
	"cassandra.cf.name" = "org_wso2_appmgt_bam_uiactivity",
	"cassandra.columns.mapping" = ":key,payload_appId, payload_userId, payload_tenantId");   
 
CREATE EXTERNAL TABLE IF NOT EXISTS APPMGR_APP_HIT_TOTAL (uuid STRING,user_id STRING,hit_count BIGINT,tenant_id INT) STORED BY 
'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'uuid,user_id',
'hive.jdbc.table.create.query' ='CREATE TABLE IF NOT EXISTS APPMGR_APP_HIT_TOTAL (uuid VARCHAR2(500) NOT NULL,
user_id VARCHAR2(50) NOT NULL,hit_count BIGINT,tenant_id INTEGER,PRIMARY KEY (uuid, user_id),FOREIGN KEY(uuid) REFERENCES APPMGR_APP(uuid),FOREIGN KEY(user_id) REFERENCES AM_SUBSCRIBER(user_id))');                                                                   

insert overwrite table APPMGR_APP_HIT_TOTAL  
select uuid,user_id, count(*) as hit_count,tenant_id
from APPMGR_APP_HIT_TOTAL_TEMP
group by uuid,user_id,tenant_id;
                                    

                                    
