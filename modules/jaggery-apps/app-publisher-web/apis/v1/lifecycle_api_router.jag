<%
/*
 Description: Provides a means to attach life cycles to artifacts
 Note: type: shortName in the Rxt templates

 GET api/lifecycle/{asset-type}/{artifact-id}                : Returns the current lifecycle state of an artifact
 GET api/lifecycle/checklist/{type}/{id}                     : Returns the check list for an artifact
 GET api/lifecycle/checklistitem/{index}/{type}/{id}         : Returns the checked state of the check list item at
                                                               the given index.
 GET api/lifecycle/actions/{type}/{id}                       : Gets the actions available to an asset at a given state

 DELETE api/lifecycle/{asset-type}/{artifact-id}		     : Detaches the current lifecycle from the artifact
 DELETE api/lifecycle/checklistitem/{index}/{type}/{id}      : Unticks a check list item at the given index

 POST  api/lifecycle/{asset-type}/{artifact-id}   	         : Attach the provided lifecycle to the artifact
 POST api/lifecycle/checklistitem/{index}/{type}/{id}        : Ticks a check list item at the given index

 PUT api/lifecycle/{action}/{asset-type}/{artifact-id}	     : Performs the provided the action on the provided asset

 Filename:lifecycle_api_router.js
 Created Date: 6/8/2013
 */

require('/modules/publisher.js').exec(function(ctx) {

  var config = require('/config/publisher.json');
  var caramel = require('caramel');
  var router = require('/modules/router-g.js').router();
  var routeManager = new router.Router();
  var log = new Log();
  var permissions=require('/modules/permissions.js').permissions;

  routeManager.register('POST', 'publisher', '/publisher/api/lifecycle/{type}/{id}', function(context) {
    var shortName = context.params.type;
    var id = context.params.id;
    var lifecycle = context.post.lifecycle;
    //var autoPromote=context.post.promote||false;    //If promote is not specified do not auto promote
    var invokeAction = '';
    //Check the config for a lifeCycleBehaviour block
    utility.isPresent(config, 'lifeCycleBehaviour', function(lifeCycleBehaviour) {
      utility.isPresent(lifeCycleBehaviour, lifeCycle, function(lifeCycleData) {
        utility.isPresent(lifeCycleData, 'onAttach', function(onAttach) {
          invokeAction = onAttach.action || '';
        });
      });

    });

    if (!lifecycle) {
        response.sendError(400, 'Missing required parameter: lifecycle');
        return;
    }

    var artifactManager = rxtManager.getArtifactManager(shortName);
    try {
      var artifact = artifactManager.get(id);
      artifactManager.attachLifecycle(lifecycle, artifact);
      //Perform the action if the user has specified an action
      if (invokeAction != '') {
        artifactManager.promoteLifecycleState(invokeAction, artifact);
      }

      var msg = {};
      msg['status'] = 'ok';

      print(msg);
    } catch (e) {
      log.debug('The asset with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
      response.sendError(404, 'The asset with id: ' + id + ' could not be found.Please refere to the server log.');
    }
  });

  /*
        Ticks the check list item at the provided index
*/
  routeManager.register('POST', 'publisher', '/publisher/api/lifecycle/checklistitem/{index}/{type}/{id}', function(context) {

    var checkListItemIndex = context.params.index;
    var shortName = context.params.type;
    var id = context.params.id;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
      var artifact = artifactManager.get(id);
      artifactManager.checkItem(checkListItemIndex, artifact);
      var msg = {};
      msg['status'] = 'ok';
    } catch (e) {
      log.debug('The asset with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
      response.sendError(404, 'The asset with id: ' + id + ' could not be found.Please refer to the server log.');
    }
  });

  routeManager.register('DELETE', 'publisher', '/publisher/api/lifecycle/{type}/{id}', function(context) {

    var shortName = context.params.type;
    var id = context.params.id;
    var artifactManager = rxtManager.getArtifactManager(shortName);
    try {
      var artifact = artifactManager.get(id);
      artifactManager.detachLifecycle(artifact);

      var msg = {};
      msg['status'] = 'ok';

      print(msg);
    } catch (e) {
      log.debug('The asset with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
      response.sendError(404, 'The asset with id: ' + id + ' could not be found.Please refer to the server log.');
    }

  });

/*
  Unticks the check list item at the given index
*/
  routeManager.register('DELETE', 'publisher', '/publisher/api/lifecycle/checklistitem/{index}/{type}/{id}', function(context) {
    var checkListItemIndex = context.params.index;
    var shortName = context.params.type;
    var id = context.params.id;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
      var artifact = artifactManager.get(id);
      artifactManager.uncheckItem(checkListItemIndex, artifact);
      var msg = {};
      msg['status'] = 'ok';
    } catch (e) {
      log.debug('The lifecyle check list item at index ' + checkListItemIndex + ' of asset id: ' + id + ' could not be unticked' + 'The following exception was thrown: ' + e);
      response.sendError(404, 'The lifecycle check list item at index ' + checkListItemIndex + ' of asset id: ' + id + ' could not be unchecked' + '.Please refer to the server log');
    }
  });


/**
 * API for handling API Lifecycle Transitions
 */
routeManager.register('PUT', 'publisher', '/publisher/api/lifecycle/{action}/{type}/{id}', function(context) {
        var shortName = context.params.type;

        if(shortName === "mobileapp"){

            mobileAppsLifeCycleChange(context, rxtManager, utility);
            return;
        }

        var action = context.params.action;
        var id = context.params.id;

        var roles = context.content.roles || [];
        //var artifactManager = rxtManager.getArtifactManager(shortName);

        var artifactManager = rxtManager.getSystemArtifactManager(shortName,session);
        var artifact = artifactManager.get(id);
        var currentState = artifactManager.getLifecycleState(artifact).toString();
        var carbon = require('carbon');
        var um = server.userManager(server.current(session).tenantId);
        var validRoles = um.allRoles();
        var commentNeeded = false;
        var publishAuthorized = true;
        var msg={};
        var publisherActions = config.publisherActions;
        var user = server.current(session);

        if(publisherActions.indexOf(action) > -1) {
            var um = server.userManager(server.current(session).tenantId);
            var publishAuthorized = permissions.isAuthorized(user.username, config.permissions.webapp_publish, um);
            log.debug("## Publish Authorized Check : " + publishAuthorized);
        }

        if (publishAuthorized) {
            if (commentNeeded) {
                response.sendError(400, 'This change requires that you insert a comment');
            } else {
                try {
                    var artifact = artifactManager.get(id);
                    var attributes = artifact.attributes;

                    var previourStatus = artifact['lifecycleState'];
                    log.debug('Calling promoteLifecycleState for action : ' + action);

                    if (roles.length > 0) {
                        roles.forEach(function (role) {
                            um.authorizeRole(role, artifact.path, carbon.registry.actions.GET);
                        });
                    }

                    if (permissions.isLCActionsPermitted(user.username, artifact.path, um)) {
                        artifactManager.promoteLifecycleState(action, artifact);
                        msg['status'] = 'ok';
                        log.debug('Has permission to perform the action');
                    } else {
                        log.debug('Does not have permission to perform the action');
                        msg['status'] = 'failed';
                        msg['message'] = 'You do not have rights to perform the life-cycle operation';
                        response.status = 401;
                    }

                    var comment;
                    if (context.content && (comment = parse(context.content).comment)) {
                        var lcHistory = artifactManager.getLifecycleHistory(artifact);
                        var lcHistoryXML = new XML(lcHistory.content);
                        lcHistoryJSON = utility.xml.convertE4XtoJSON(lcHistoryXML);
                        var newChangeOrder = lcHistoryJSON.item[0].order;
                        require('/modules/comment.js').addLifecycleComment(artifactManager, artifact.path, comment, newChangeOrder);
                    }

                    //Enforcing restrict visibility logic
                    if(action=="Publish") {
                        var registry = new carbon.registry.Registry(server, {
                            username: server.current(session).username,
                            tenantId: server.current(session).tenantId
                        });

                        var roleRestrictionPath = artifact.path + "role_restrictions";
                        try{
                            var permissionSet = registry.get(roleRestrictionPath);
                            var content = '' + permissionSet.content;

                            if (content != "{}") {
                                um.denyRole('Internal/everyone', artifact.path, carbon.registry.actions.GET);
                                um.denyRole('system/wso2.anonymous.role', artifact.path, carbon.registry.actions.GET);
                            }
                        } catch (e) {
                            log.debug('No role restrictions found for APP ' + id);
                        }
                    }
                } catch (e) {
                    log.debug('The asset with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
                    response.sendError(404, 'The asset with id: ' + id + ' could not be found.Please refer to the server log.');
                }
            }

        } else {
            msg['status'] = 'error';
            msg['message'] = 'Action not permitted. Insufficient privileges.';
        }
        print(msg);

});

/*
 The function returns the lifecycle structure of a given asset
 */
  function obtainLifeCycle(type) {
    CommonUtil = Packages.org.wso2.carbon.governance.lcm.util.CommonUtil;
    var rootReg = rxtManager.registry.registry;
    var configReg = rootReg.getChrootedRegistry('/_system/config');

    //Obtain a model of the type
    var model = modelManager.getModel(type);

    var lifecycle = model.get('*.lifeCycle').value;

    var data = CommonUtil.getLifecycleConfiguration(lifecycle, configReg);

    //Convert to an xml
    data = '<?xml version="1.0" encoding="ISO-8859-1"?>' + data;
    var xml = new XML(data);

    //Convert to a json
    data = data.replace('<?xml version="1.0" encoding="ISO-8859-1"?>', '');
    var lcJSON = utility.xml.convertE4XtoJSON(xml);

    return lcJSON;
  }

		routeManager.register('GET', 'publisher', '/publisher/api/lifecycle/{type}/{id}', function(context) {
    try {

        appPublishWFExecutor = org.wso2.carbon.appmgt.impl.workflow.WorkflowExecutorFactory.getInstance().getWorkflowExecutor("AM_APPLICATION_PUBLISH");
        var isAsynchronousFlow = appPublishWFExecutor.isAsynchronus();
        var shortName=context.params.type;
        var id=context.params.id;
        var artifactManager=rxtManager.getArtifactManager(shortName);
        var artifact=artifactManager.get(id);
        var state=artifactManager.getLifecycleState(artifact);
        var actions=artifactManager.availableActions(artifact);
        var lcJSON=obtainLifeCycle(shortName);

        var msg={};
        msg['status']='ok';
        msg['state']=state;
        msg['actions']=actions;
        msg['lifecycle']=lcJSON;
        msg['asynch']=isAsynchronousFlow;

        log.debug(msg);
        print(msg);
    } catch(e){
        log.debug('The asset with id: '+id+' could not be found.The following exception was thrown: '+e);
        response.sendError(404,'The asset with id: '+id+' could not be found.Please refere to the server log.');
    }
});
  
routeManager.register('GET', 'publisher', '/publisher/api/lifecycle/subscribe/{type}/{id}', function(context) {
    try {
	var shortName=context.params.type;
  	var id=context.params.id;
  	var artifactManager=rxtManager.getArtifactManager(shortName);
  	var artifact=artifactManager.get(id);
  	var state=artifactManager.getLifecycleState(artifact);
	var webappProvider = artifact.attributes['overview_provider'];
  	var webappName = artifact.attributes['overview_name'];
  	var webappVersion = artifact.attributes['overview_version'];
  	
	var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
  	var apiIdentifierObj = new apiIdentifier(webappProvider, webappName, webappVersion);
  	       
  	var appMDAO = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
  	var appMDAOObj = new appMDAO();
  	var count = appMDAOObj.getAPISubscriptionCountByAPI(apiIdentifierObj);
  	var subscribed = false;
  	if(count > 0){
		subscribed = true;
  	}
  	        
  	var msg={};
  	msg['subscribed'] = subscribed;
  	msg['state'] = state;
  	 	
  	log.debug(msg);
  	print(msg);
    } catch(e){	
	log.debug('The asset with id: '+id+' could not be found.The following exception was thrown: '+e);
  	response.sendError(404,'The asset with id: '+id+' could not be found.Please refere to the server log.');
    }
});
 
routeManager.register('GET', 'publisher', '/publisher/api/lifecycle/information/meta/{type}/roles', function(context) {
    var shortName = context.params.type;
    var carbon = require('carbon');
    var realmService = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    var realm = realmService.getTenantUserRealm(server.current(session).tenantId);

    var allRoles = realm.getUserStoreManager().getRoleNames();

    var lifecycleJSON = obtainLifeCycle(shortName);
    var relatedRoles = [];

    // TODO: needs to go in a config
    var criticalRoles = ['admin'];

    lifecycleJSON.configuration[0].lifecycle[0].scxml[0].state.forEach(function(state) {
      if (state.id != "Retired") {
	      state.datamodel.forEach(function(dataModel) {
		dataModel.data.forEach(function(data) {
		  data.execution.forEach(function(execution) {
		    execution.parameter.forEach(function(parameter) {
		      if (parameter.name.indexOf('STATE_RULE') > -1) {
		        var role = parameter.value.split(':')[0];
		        if (role.indexOf('{') === -1) {
		          relatedRoles.push(parameter.value.split(':')[0]);
		        }
		      }
		    })
		  })
		})
	      })
	}
    });

    for (var i = 0; i < criticalRoles.length; i++) {
      if (allRoles.indexOf(criticalRoles[i]) > -1) {
        allRoles.splice(i, 1);
      }
    };

    // TODO: needs to go in a config
    if (relatedRoles.indexOf('Internal/everyone') === -1 && relatedRoles.indexOf('system/wso2.anonymous.role') === -1) {
      // if there are no permissions for anoanymous users and registered users

      for (var i = 0; i < allRoles.length; i++) {
        if (relatedRoles.indexOf(allRoles[i]) === -1) {
          // if the role is not included in the lifecycle, remove the role from the list of possible roles
          allRoles.splice(i, 1);
        }
      }
    }

    var matchedRoles = [];

    var query = request.getQueryString() && request.getQueryString().split('=')[1];

    if (!query) {
      query = '';
    }

    for (var i = 0; i < allRoles.length; i++) {
      if (allRoles[i].indexOf(query) > -1) {
        matchedRoles.push({
          id: allRoles[i],
          name: allRoles[i]
        });
      }
    };

    matchedRoles = parse(stringify(matchedRoles));

    var hiddenRoles = config.hiddenRoles;

    var filteredRoles = [];

    if(matchedRoles.length > 0) {
        for (var i = 0; i < matchedRoles.length; i++) {
            if ((matchedRoles[i].id.indexOf("Internal/private_") == -1) && (hiddenRoles.indexOf(matchedRoles[i].id) == -1)) {
                filteredRoles.push(matchedRoles[i]);
            }
        }
    }


    response.contentType = 'application/json';
    response.status = 200;
    response.content = filteredRoles;
});

routeManager.register('GET','publisher','/publisher/api/lifecycle/checklist/{type}/{id}',function(context){
   //log.debug('short name: '+context.params.type);

    try {
      log.debug('Entered check list/type/id ');
      var shortName = context.params.type;
      var id = context.params.id;
      var artifactManager = rxtManager.getArtifactManager(shortName);
      var artifact = artifactManager.get(id);
      var checkListItems = artifactManager.getCheckListItemNames(artifact);
      var msg = {};
      msg['status'] = 'ok';
      msg['checkListItems'] = checkListItems;
      print(msg);
    } catch (e) {
      log.debug('The check list names were not retrieved for artifact: ' + id + ' .The following exception was thrown: ' + e);
      response.sendError(404, 'The check list item names could not be retrieved for artifact: ' + id + ' .Please refer to the server log.');
    }
  });

/*
  Gets the checked or unchecked state of a check list item
*/
  routeManager.register('GET', 'publisher', '/publisher/api/lifecycle/checklistitem/{index}/{type}/{id}', function(context) {
    try {
      log.debug('Entered checklistitem/index/type/id ');
      var checkListItemIndex = context.params.index;
      var shortName = context.params.type;
      var id = context.params.id;

      var artifactManager = rxtManager.getArtifactManager(shortName);

      var artifact = artifactManager.get(id);
      var isChecked = artifactManager.isItemChecked(checkListItemIndex, artifact);
      var msg = {};
      msg['status'] = 'ok';
      msg['index'] = checkListItemIndex;
      msg['isChecked'] = isChecked;
      print(msg);
    } catch (e) {
      log.debug('The check list item index state could not be  retrieved for aritfact: ' + id + ' .The following exception was thrown: ' + e);
      response.sendError(404, 'The check list item state could not be retrieved for artifact: ' + id + ' .Please refer to the server log.');
    }
  });

routeManager.register('GET', 'publisher', '/publisher/api/lifecycle/information/history/{type}/{id}/{version}', function(context) {
    try {
      var shortName = context.params.type;
      var id = context.params.id;
      var artifactManager = rxtManager.getArtifactManager(shortName);
      var artifact = artifactManager.get(id);
      var historyRes = artifactManager.getLifecycleHistory(artifact);
      var historyComments = require('/modules/comment.js').getLifecycleComments(artifactManager, artifact);
      var json = {};

      if (historyRes != undefined) {
        var xml = new XML(historyRes.content);
        json = utility.xml.convertE4XtoJSON(xml);
      }
      print(json);
   }catch(e){
       log.debug('The lifecycle history for artifact: '+id+' could not be found.The following exception was thrown: '+e);
       response.sendError(404,'The lifecycle history details could not be retrieved for artifact: '+id+'.Pleas refer to the server log.');
   }
});

var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

var sm=securityModule.cached();

//This will short circuit the handling of the requests
var passed=sm.check(session,function(){
    response.sendError(401);
});

  //Stop servicing the request if the check failed
  if (passed) {
    var store = require('store');
    var user = store.user;
    var utility = require('/modules/utility.js').rxt_utility();
    var server = store.server;

    var publisher = require('/modules/publisher.js').publisher(request, session);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;

    routeManager.handle(request, response);
  }

}, request, response, session);




/**********************************************MOBILE**************************************************/



function mobileAppsLifeCycleChange(context, rxtManager, utility){

    var store = require('store');
    var server = store.server;
	var msg={};

    var permissions=require('/modules/permissions.js').permissions;
    var user = server.current(session);
    var um = server.userManager(server.current(session).tenantId);
    var log = new Log();


    var shortName = context.params.type;
    var action = context.params.action;
    var id = context.params.id;

    //var artifactManager = rxtManager.getArtifactManager(shortName);
    var artifactManager = rxtManager.getSystemArtifactManager(shortName,session);

    try {
        var artifact = artifactManager.get(id);
        log.debug('Calling promoteLifecycleState for action : '+action);
        var attributes = artifact.attributes;

        if (permissions.isLCActionsPermitted(user.username, artifact.path, um)) {
        var previourStatus = artifact['lifecycleState'];
        log.info('Calling promoteLifecycleState for action mobile : ' + action);

        artifactManager.promoteLifecycleState(action,artifact);

        var comment;
        if (context.content && (comment=parse(context.content).comment) ) {
            var lcHistory = artifactManager.getLifecycleHistory(artifact);
            var lcHistoryXML = new XML(lcHistory.content);

            lcHistoryJSON = utility.xml.convertE4XtoJSON(lcHistoryXML);
            var newChangeOrder = lcHistoryJSON.item[0].order;
            require('/modules/comment.js').addLifecycleComment(artifactManager, artifact.path, comment, newChangeOrder);
        }
        msg['status']='ok';
        print(msg);
        } else {
            log.debug('Does not have permission to perform the action');
		    msg['status'] = 'failed';
            msg['message'] = 'You do not have rights to perform the life-cycle operation';
		    print(msg);
            response.status = 401;
        }
    }
    catch (e) {
        log.debug('The asset with id: '+id+' could not be found.The following exception was thrown: '+e);
        response.sendError(404,'The asset with id: '+id+' could not be found.Please refer to the server log.');
    }




}





/**********************************************END_MOBILE**************************************************/










%>
