<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET  api/asset/{type} 	       	  : Provides the Rxt template
 GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
 POST api/asset/{type}             : Creates a new asset of the given type
 PUT  api/asset/{type}/{id}	  : Updates an asset with the given type and id
 DELETE asset/{type}/{id} 	  : Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */

include("/extensions/webapp/modules/jagg/jagg.jag");

require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');
    var apiProvider = jagg.module('manager').getAPIProviderObj();
    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var log= new Log();

    var appmgtPublisher = require('appmgtpublisher');






    /****************************MOBILE*******************************************/

    var config = require('/config/publisher.json');
    var mam_config = require('/extensions/mobileapp/config/mam-config.json');
    var caramel = require('caramel');
    var server = require('store').server;
    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var utility=require('/modules/utility.js').rxt_utility();
    var permissions=require('/modules/permissions.js').permissions;


    var checkNonSpecial = function(value){
        var non_special_regex = /^[A-Za-z][A-Za-z0-9\s-]*$/;
        return non_special_regex.test(value);
    }




    var makeid= function(){
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for( var i=0; i < 15; i++ )
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    }

    var getExtensionText = function(extension){
        var index = extension.lastIndexOf('.');
        var ext = index < extension.length ? extension.substring(index + 1) : '';
        return ext;
    }

    var getExtension = function(file){
        var path = file.getName();
        var index = path.lastIndexOf('.');
        var ext = index < path.length ? path.substring(index + 1) : '';
        return ext;
    }
    var getFileOnly = function(file){
        var path = file.getName();
        var index = path.lastIndexOf('.');
        var name = index < path.length ? path.substring(0,index) : '';
        return name;
    }
    var saveFile = function(file){
        if(file!=undefined){
            var file_n= file.getName();
            file_n = "." + file_n.split('.').pop();
            if(file_n==""){
                return "";
            }
            var uid= makeid();

            if(mam_config.filePreciseLocation.substring(0, 1) === "/"){
                var file_name = mam_config.filePreciseLocation+uid+file_n;
            }else{
                var file_name = Packages.java.lang.System.getProperty("carbon.home") + "/" + mam_config.filePreciseLocation+uid+file_n;
            }


            var fileTemp=new File( 'file://' + file_name);
            try{
                fileTemp.open('w');
                fileTemp.write(file.getStream());
            }catch(e){
                print(e);
            } finally{
                fileTemp.close();
            }

            return "/publisher"+ mam_config.fileAPILocation + uid + file_n;

        }
        return "";
    }



    var getBundleID = function(appid){
        try{
            var result =  get('https://itunes.apple.com/lookup?id='+appid).data;
            if(result!=null){
                log.debug(result);
                result = parse(result);
                if(result.resultCount==1){
                    var appinfo =  result.results[0];
                    var bundleId = appinfo.bundleId;
                    return bundleId;
                }
            }
        }catch(e){
            return null;
        }
    }

    var validateAppIdentifier = function(attributes, display_attribute){
        var artifactManager = rxtManager.getArtifactManager('mobileapp');

        var predicate={}
        predicate['attributes']=attributes;

        //Perform a search for an asset with the provided name
        var matches=artifactManager.find(function(asset){
            var equal=utility.assertEqualCaseSensitive(asset,predicate);
            return equal;
        },null);

        if(matches.length>0){
            print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["App with identifer "+display_attribute+" and version "+attributes.overview_version+" already exists"]}})
            return true;
        }
    }


    /**************************END_MOBILE*****************************************/


    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}', function (context) {

        var shortName = (context.params.type) || '';

        var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
            return (template.shortName == shortName) ? true : false;
        });

        if (!rxtTemplate) {
            log.debug('The asset type: ' + shortName + ' could not be found');
            response.sendError(404, 'Asset type not found.'); //TODO: Replace
        }
        else {
            var model = modelManager.getModel(shortName);
            //Obtain the username from the session and populate the provider field

            var username=require('store').server.current(session).username;//.get('LOGGED_IN_USER');
            model.set('overview.provider',username);
            var output=model.export('form');

            print(output);
        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/trackingid/{uuid}', function (context) {
        var response={}
        var uuid = context.params.uuid;
        var trackinID= apiProvider.getTrackingID(uuid);
        response["TrackingID"] = trackinID;
        print(response);
    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/deploySample', function (context) {
        var webapps = require('/config/SampleWebappConfiguration.json');
        var sessionID=session.getId();
        var username=require('store').server.current(session).username;
        var request = {} ;
        request["username"] = stringify(username);
        request["creatorSession"] = sessionID;       
        request["webapps"] = stringify(webapps); 
        var deployerClass = Packages.org.wso2.carbon.appmgt.sample.deployer.deploy.Deployer; 
        var deployerObj = new deployerClass();
        var msg={};
        msg["isSampleDeployed"] = true;
        msg["isError"] = "true";
        msg["isNew"] = "true";
        var response;
        try {
            response = deployerObj.deploySample(request);
            if(response){
                msg["response"] = "Samples deployed succesfully. " +
                        "You can login to store using UserName : subscriber_" +username+
                        " Password : subscriber"
                msg["isError"] = "false";        
            }else{
                msg["response"] = username+" has already created a sample web application"
                msg["isError"] = "true";
            }
            
            print(msg);
            session.put("deploysample", msg);
        } catch (error){
            msg["response"] = error.message;
            msg["isError"] = "true";
            print(msg);
            session.put("deploysample", msg);
        }
        
    });


    routeManager.register('POST', 'publisher', '/publisher/api/asset/delete/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);
        var server  = require('store').server;
        var username = jagg.getUser().username;

        var um = server.userManager(server.current(session).tenantId);
        var deleteAuthorized = permissions.isAuthorized(username, config.permissions.webapp_delete, um);
        log.debug("## Delete Authorized Check : " + deleteAuthorized);

        if(deleteAuthorized) {
            try {
                //Get the original artifact
                var originalArtifact = artifactManager.get(id);
                var attributes = originalArtifact.attributes;

                var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
                var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;

                var ssoProvider = Packages.org.wso2.carbon.appmgt.api.model.SSOProvider;
                //Create SSOProvider Object
                var ssoProviderObj = new ssoProvider();

                var appProvider = attributes["overview_provider"];
                var appName = attributes["overview_name"];
                var appVersion = attributes["overview_version"];
                var ssoProvider = attributes["sso_ssoProvider"];
                var result = null;
                var issuerName = null;
                var store = jagg.module("manager").getAPIStoreObj();
                var isEmailLoginEnabled = store.isEnableEmailUsername();

                //Check whether application author is a tenant
                if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
                    result = appProvider.split("-AT-");
                }
                if (result != null) {
                    issuerName = appName + "-" + result[1] + "-" + appVersion;
                } else {
                    issuerName = appName + "-" + appVersion;
                }

                var apiIdentifierObj = new apiIdentifier(appProvider, appName, appVersion);
                if (ssoProvider != " ") {
                    ssoProviderObj.setProviderName(ssoProvider.split("-")[0]);
                    ssoProviderObj.setProviderVersion(ssoProvider.split("-")[1]);
                    ssoProviderObj.setIssuerName(issuerName);
                } else {
                    ssoProviderObj = null;
                }

                var webAppObj = new webApp(apiIdentifierObj);

                var isDeleted = apiProvider.deleteApp(apiIdentifierObj, username, ssoProviderObj);

                if (isDeleted == true) {
                    msg['isDeleted'] = true;
                    msg['message'] = 'asset delete';
                    print(msg);
                } else if (isDeleted == false) {
                    msg['isDeleted'] = false;
                    msg['message'] = 'asset subscribed';
                    print(msg);
                } else {
                    msg['ok'] = null;
                    msg['message'] = 'asset error';
                    print(msg);
                }

            } catch (e) {
                log.debug('The asset ' + id + ' could not be deleted.The following exception was thrown: ' + e);
                response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
            }
        }else{
            msg['ok'] = false;
            msg['message'] = 'Delete not permitted. Insufficient privilages.';
            print(msg);
        }
    });


    routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {

        var shortName = context.params.type;

        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(shortName);

        //If the id is not found it will throw a conversion exception
        try {

            var artifact = artifactManager.get(id);

            //Perform some filerting logic
            artifact=filterManager.filter(artifact,session);

            if(!artifact){
                response.sendError(401,'You do not have viewing rights for this asset');
                return;
            }

            var model = modelManager.getModel(shortName);

            //Customize the resource for the current app
            dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

            model.import('asset', artifact);


            var result = model.export('form');

            print(result);
        } catch (e) {

            log.debug('The asset type: ' + shortName + ' with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
            response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check the server logs.');
        }

    });

    routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}', function (context) {
        var shortName = context.params.type;
        var artifactManager = rxtManager.getArtifactManager(shortName);

        var carbon = require('carbon');
        var social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');



        //check for mobile
        if(shortName === "mobileapp"){
            addNewMobileApp(context, rxtManager);
            return;
        }


        //Check if the type is valid
        try {

            var model=modelManager.getModel(shortName);

            //assigning default thumbnail and banner if not provided.
            if(context.post['images_thumbnail'] == '') {
                context.post['images_thumbnail'] = '/publisher/config/defaults/img/thumbnail.jpg';
            }
            if(context.post['images_banner'] == '') {
                context.post['images_banner'] = '/publisher/config/defaults/img/banner.jpg';
            }



            model.import('form.importer',context.post);

            //Perform validations on the asset
            var report=model.validate();

            //If the report indicates the model has failed validations send an error
            if((report)&&(report.failed)){
                print({ok:false,message:'Validation failure',report:report});
                return;
            }

            //var assetModel = getModel(context.post);

            model.save();

            //var createdAsset = artifactManager.add(assetModel);

            //Get the model id
            var idField = model.get('*.id');

            try{
                social.warmUpRatingCache(shortName + ':' + idField.value);
            }catch(e) {
                log.warn("Unable to publish the asset: " + shortName + ":" + idField.value + " to social cache. This may affect on sort by popularity function.");
            }


            if (idField) {
                print({ok: 'true', message: 'Asset created.', id: idField.value});
            }
            else {
                log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
            }

        }
        catch (e) {
            log.debug('An asset of type: ' + shortName + ' could not be created.The following exception was thrown: ' + e);
            response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
        }

    });

    routeManager.register('GET', 'publisher', '/publisher/api/asset/userRoles/{type}/{id}', function (context) {




        var type = context.params.type;
        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(type);

        var artifact = artifactManager.get(id);

        //Obtain the path of the asset
        var path = artifact.path;

        //Obtain the tags
        var tags = rxtManager.registry.tags(path);

        //Create a tag array
        var counter = 0;
        var tagArray = [];

        for (var index in tags) {
            tagArray.push({id: counter, name: tags[index]});
        }

        print(tagArray);
    });


    routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {



        var shortName = context.params.type;

        if(shortName === "mobileapp"){

            editMobileApp(context, rxtManager);
            return;
        }


        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);

        var server  = require('store').server;
        var username = server.current(session).username;

        var user = server.current(session);
        var um = server.userManager(server.current(session).tenantId);
        var updateAuthorized = permissions.isAuthorized(username, config.permissions.webapp_update, um);

        if(context.post['images_thumbnail'] instanceof Array){
            context.post['images_thumbnail'] = context.post['images_thumbnail'][0];
        }
        if(context.post['images_banner'] instanceof Array){
            context.post['images_banner'] = context.post['images_banner'][0];
        }

        if(updateAuthorized) {
            try {
            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Handle any files
            inspectFiles(request,context.post);
            var originalArtifact = artifactManager.get(id);

            //Get the original artifact
            if(context.post["images_thumbnail"] == ""){
                context.post["images_thumbnail"] = originalArtifact.attributes["images_thumbnail"];
            }
            if(context.post["images_banner"] == ""){
                context.post["images_banner"] = originalArtifact.attributes["images_banner"];
            }

            modelA.import('form.importer', context.post);

            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

            var report=modelA.validate();
            //Check if the validation check has failed
            if((report)&&(report.failed)){

                msg['ok']=false;
                msg['report']=report;
                print(msg);
                log.debug(msg);
                return;
            }


            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']

            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

            //If they are not equal,abort the operation
            if (!isEqual) {
                log.debug('trying to get fields which are different');
                var diff=modelManager.diff(modelA,modelB,reqProps);
                response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                        +' were modified: '+diff);
                return;
            }
            modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
            var artifact = modelA.export('asset.exporter');


            var index = 0;
            var uritemplate = "uritemplate_urlPattern" + index;

            while (uritemplate in artifact.attributes) {
                var urlPattern = artifact.attributes['uritemplate_urlPattern'+index];
                if(urlPattern == "null" || urlPattern == "" ){
                    var key_pattern = 'uritemplate_urlPattern'+index;
                    var key_httpVerb = 'uritemplate_httpVerb' + index;
                    var key_policyGroupId = 'uritemplate_policygroupid' + index;

                    delete artifact.attributes[key_pattern];
                    delete artifact.attributes[key_httpVerb];
                    delete artifact.attributes[key_policyGroupId];
                }
                index++;
                uritemplate = "uritemplate_urlPattern" + index;
            }

            dataInjector.inject(artifact,DataInjectorModes.UPDATE);

            artifactManager.update(artifact);

            // dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

            var update = apiProvider.updateAPI(artifact);

            var attributes = artifact.attributes;

            //Update entitlement policies of the web application
            updateEntitlementPolicies(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);

            //update OAuth APIs consumer details per given web-app
            var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
            var apiIdentifierObj = new apiIdentifier(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);

            var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;
            var webAppObj = new webApp(apiIdentifierObj);

            var appMDAO = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
            var appMDAOObj = new appMDAO();

	    var tenantId = server.current(session).tenantId;

            appMDAOObj.updateOAuthAPIAccessInfo(webAppObj, tenantId);

            var count = 1;
            var tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];

	    var tenantId = server.current(session).tenantId;
	    var tenantDomain = carbon.server.tenantDomain({tenantId:tenantId});
	    var saml2SsoIssuer = null;
	    if (tenantId == -1234) {
		saml2SsoIssuer = attributes["overview_name"] + "-" + attributes["overview_version"];
	    } else {
		saml2SsoIssuer = attributes["overview_name"] + "-" + tenantDomain + "-" + attributes["overview_version"];
	    }

            while (tokenEndpoint != null && tokenEndpoint.trim().length > 0) {

                webAppObj.setTokenEndpoint(attributes["oauthapis_apiTokenEndpoint" + count]);
                webAppObj.setApiConsumerKey(attributes["oauthapis_apiConsumerKey" + count]);
                webAppObj.setApiConsumerSecret(attributes["oauthapis_apiConsumerSecret" + count]);
                webAppObj.setApiName(attributes["oauthapis_apiName" + count]);
		webAppObj.setSaml2SsoIssuer(saml2SsoIssuer);

                count++;
                tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];

                //Save OAuth APIs consumer details per given web-app
                appMDAOObj.addOAuthAPIAccessInfo(webAppObj, tenantId);
            }
            
            var artifactManagerForUpdate = rxtManager.getSystemArtifactManager(shortName,session);

            if(originalArtifact.lifecycleState=="Approved") {
                var updateLCArtifact = artifactManager.get(id);
                artifactManagerForUpdate.promoteLifecycleState("Revert", updateLCArtifact);
            }

            msg['ok']=true;
            msg['message']='asset updated';
            msg['asset']=artifact;
            print(msg);


            } catch (e) {
                log.warn(e)
                log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
                response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
            }
        }else{
            msg['ok'] = false;
            msg['message'] = 'Update Failed. Insufficient privilages.';
            print(msg);
            return;
        }
    });

    /**
     * Saves external entitlement policies.
     */
    function saveExternalEntitlementPolicies(params){

        var policies = parse(params['entitlementPolicies']);
        var policiesToBeSaved = new Array();

        var EntitlementPolicy = Packages.org.wso2.carbon.appmgt.api.model.entitlement.EntitlementPolicy;
        var entitlementPolicy;
        for(var i = 0; i < policies.length; i++){
            if(policies[i]){
                entitlementPolicy  = new EntitlementPolicy();
                entitlementPolicy.setPolicyId(policies[i]['id']);
                entitlementPolicy.setPolicyContent(policies[i]['content']);
                policiesToBeSaved.push(entitlementPolicy);
            }

        }

        if(policiesToBeSaved.length > 0){
            apiProvider.saveEntitlementPolicies(policiesToBeSaved);
        }

    }

    /**
     * Update entitlement policies.
     */
    function updateEntitlementPolicies(overviewProvider,overviewName,overviewVersion){

        // Save external entitlement policies
        var webappId={};
        webappId.provider= overviewProvider;
        webappId.name= overviewName;
        webappId.version= overviewVersion;
        apiProvider.generateEntitlementPolicies(webappId);
    }


    /*
     The function inspects the files sent with a request.If files are found
     they are added to Storage and then the generated uuids are added to
     the POST parameter object
     @req: A request object
     @params: The POST parameters
     */
    function inspectFiles(req, params) {
        var files = req.getAllFiles();
        var fileName;
        var file;
        var uuid = '';
        var extension;
        var thumbnail;
        var banner;

        var storageManager = new storageModule.StorageManager({
            context: 'storage',
            isCached: false,
            connectionInfo: {
                dataSource: storageConfig.dataSource
            }
        });


        for (var index in files) {

            file = files[index];

            log.debug('file: ' + index);

            //Put the file in storage and get a uuid as a reference
            var resource = {};
            resource['file'] = file;
            extension = utility.fileio.getExtension(file);
            resource['contentType'] = utility.fileio.getContentType(extension);

            uuid=storageManager.put(resource);

            log.debug('uuid added: '+uuid);

            //Add a new  entry into the POST parameters containing the uuid
            params[index] = uuid;

        }
    }

    routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);


        try {
            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Get the original artifact
            var originalArtifact = artifactManager.get(id);

            modelA.import('form.importer', context.content);

            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

            var report=modelA.validate();

            //Check if the validation check has failed
            if((report)&&(report.failed)){

                msg['ok']=false;
                msg['report']=report;
                print(msg);
                return;
            }

            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']

            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

            //If they are not equal,abort the operation
            if (!isEqual) {
                log.debug('trying to get fields which are different');
                var diff=modelManager.diff(modelA,modelB,reqProps);
                response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                        +' were modified: '+diff);
                return;
            }
            modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
            var artifact = modelA.export('asset.exporter');

            log.debug('not updating'+artifact);
            //artifactManager.update(artifact);

            msg['ok']=true;
            msg['message']='asset updated';
            print(msg);

        } catch (e) {
            log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
            response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
        }
    });



    routeManager.register('DELETE', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
        var shortName = context.params.type;
        var id = context.params.id;

        var artifactManager = rxtManager.getArtifactManager(shortName);

        try {
            artifactManager.remove(id);
            print({ok: 'true', message: 'Asset deleted'});
        } catch (e) {
            log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
            response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
        }


    });












    /**************** MOBILE APP *********************************************************/






    function addNewMobileApp(context, rxtManager){


        var shortName = context.params.type;


        var artifactManager = rxtManager.getArtifactManager(shortName);




        //Check if the type is valid
        try {

            var model=modelManager.getModel(shortName);

            //assigning default thumbnail and banner if not provided.
            if(context.post['images_thumbnail'] == '') {
                context.post['images_thumbnail'] = '/publisher/config/defaults/img/thumbnail.jpg';
            }
            if(context.post['images_banner'] == '') {
                context.post['images_banner'] = '/publisher/config/defaults/img/banner.jpg';
            }

            if(shortName !="mobileapp"){
                model.import('form.importer',context.post);
            }

            if(shortName =="mobileapp"){
                var username= server.current(session).username.replace('@', '-AT-');
                var ctx = context.post;
                log.debug(ctx);
                var files = request.getAllFiles();
                var banner = files['bannerFile'];
                banner = saveFile(banner);

                var icon = files['iconFile'];
                icon = saveFile(icon);

                var screenshot1 = files['screenshot1File'];
                screenshot1 = saveFile(screenshot1);

                var screenshot2 = files['screenshot2File'];
                screenshot2 = saveFile(screenshot2);

                var screenshot3 = files['screenshot3File'];
                screenshot3 = saveFile(screenshot3);

                var screenshots = screenshot1+","+screenshot2+","+screenshot3;
                log.debug(screenshots);

                if(screenshots==",,"){
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Screenshots not added"]}})
                    return;
                }
                var meta = ctx['appmeta'];
                log.debug(stringify(meta));
                if(meta == undefined || meta==""){
                    log.debug("Application meta data was not found");
                    response.sendError(500, 'Application meta data was not found');
                    return;
                }
                meta = parse(unescape(meta));
                var version = ctx.version;
                model.set('overview.bundleversion', version);
                model.set('overview.packagename', meta.package);
                if(ctx.markettype!='enterprise' && ctx.platform.toUpperCase()=="IOS"){
                    var bundleId = getBundleID(meta.package);
                    if(bundleId==null){
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["App ID is invalid"]}})
                        return;
                    }else{
                        if(validateAppIdentifier({"overview_appid": meta.package, "overview_version":version},meta.package)){
                            return;
                        }
                        model.set('overview.packagename', bundleId);
                        model.set('overview.appid', meta.package);
                    }
                }else if(ctx.platform.toUpperCase()=="ANDROID"){
                    if(ctx.markettype=='enterprise' ){
                        if(getExtensionText(meta.path)!="apk"){
                            print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["File uploaded is not supported by Android"]}})
                            return;
                        }
                    }
                    if(validateAppIdentifier({"overview_packagename": meta.package, "overview_version":version}, meta.package)){
                        return;
                    }
                }else if(ctx.platform.toUpperCase()=="IOS" && ctx.markettype!='Market'){
                    if(getExtensionText(meta.path)!="ipa"){
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["File uploaded is not supported by iOS"]}})
                        return;
                    }
                }
                if(!meta.weburl){
                    model.set('overview.url', meta.path);
                }else{

                    if(url_reg(meta.weburl)){
                        if(validateAppIdentifier({"overview_url": meta.weburl, "overview_version":version},meta.weburl)){
                            return;
                        }
                        model.set('overview.url', meta.weburl);
                    }else{
                        print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Invalid weburl"]}})
                        return;
                    }
                }
                model.set('overview.version', version);
                if(!checkNonSpecial(ctx.name)){
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Special characters found in name"]}})
                    return;
                }
                model.set('overview.name',ctx.name);
                model.set('overview.category',ctx.platform);
                model.set('overview.platform',ctx.platform);
                model.set('overview.provider', username);
                model.set('overview.description',ctx.description);
                model.set('overview.type',ctx.markettype);
                if(ctx.recentChanges == ""){
                    ctx.recentChanges = "-";
                }
                model.set('overview.recentchanges',ctx.recentChanges);
                model.set('images.thumbnail',icon);
                model.set('images.banner',banner);
                model.set('images.screenshots',screenshots);

            }

            //Perform validations on the asset
            var report=model.validate();

            //If the report indicates the model has failed validations send an error
            if((report)&&(report.failed)){
                print({ok:false,message:'Validation failure',report:report});
                return;
            }

            //var assetModel = getModel(context.post);

            model.save();

            //var createdAsset = artifactManager.add(assetModel);

            log.debug('finished saving');

            //Get the model id
            var idField = model.get('*.id');

            log.debug('obtained idField');

            var asset=model.export('asset.exporter');
            var assetCachingModule=require('/modules/cache/cache.manager.js').assetCachingModule();
            var assetCacheManager=new assetCachingModule.AssetCacheManager(session);
            assetCacheManager.add(asset,shortName);

            if (idField) {
                print({ok: 'true', message: 'Asset created.', id: idField.value});
            }
            else {
                log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
            }

        }
        catch (e) {
            log.debug(e);
            log.debug('An asset of type: ' + shortName + ' could not be created.The following exception was thrown: ' + e);
            response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
        }




    }


    function editMobileApp(context, rxtManager){

        var shortName = context.params.type;
        var id = context.params.id;
        var msg={};
        var artifactManager = rxtManager.getArtifactManager(shortName);

        if(context.post['images_thumbnail'] instanceof Array){
            context.post['images_thumbnail'] = context.post['images_thumbnail'][0];
        }
        if(context.post['images_banner'] instanceof Array){
            context.post['images_banner'] = context.post['images_banner'][0];
        }

        try {
            var modelA = modelManager.getModel(shortName);
            var modelB = modelManager.getModel(shortName);

            //Handle any files
            inspectFiles(request,context.post);

            //Get the original artifact
            var originalArtifact = artifactManager.get(id);


            //Validation requires the lifecycle state
            modelA.set('*.lifecycleState', originalArtifact.lifecycleState);


            if(shortName != "mobileapp"){
                modelA.import('form.importer',context.post);
            }

            if(shortName =="mobileapp"){
                modelA.import('asset', originalArtifact);
                var username= server.current(session).username.replace('@', '-AT-');
                var ctx = context.post;
                var files = request.getAllFiles();
                var banner = files['bannerFile'];
                if(banner){
                    banner = saveFile(banner);
                    modelA.set('images.banner',banner);
                }
                var icon = files['iconFile'];
                if(icon){
                    icon = saveFile(icon);
                    modelA.set('images.thumbnail',icon);
                }

                var screenshot1 = files['screenshot1File'];
                screenshot1 = saveFile(screenshot1);

                var screenshot2 = files['screenshot2File'];
                screenshot2 = saveFile(screenshot2);

                var screenshot3 = files['screenshot3File'];
                screenshot3 = saveFile(screenshot3);


                var screenshots = screenshot1+","+screenshot2+","+screenshot3;


               var ssValues =  modelA.get('images.screenshots').value;
                ssValues = ssValues.split(",");
                if(screenshot1 != "") ssValues[0] = screenshot1;
                if(screenshot2 != "" ) ssValues[1] = screenshot2;
                if(screenshot3 != "") ssValues[2] = screenshot3;


                if(screenshots!=",,"){
                    modelA.set('images.screenshots',ssValues.join());
                }
                if(!checkNonSpecial(ctx.name)){
                    print({"ok" : false, "message" : "Validation failure", "report" : {"failed" : true, "name" : ["Special characters found in name"]}});
                    return;
                }
                modelA.set('overview.name',originalArtifact.attributes.overview_name);
                modelA.set('overview.version', originalArtifact.attributes.overview_version);
                modelA.set('overview.description',ctx.description);
                modelA.set('overview.recentchanges',ctx.recentChanges);
                modelA.set('overview.provider', originalArtifact.attributes.overview_provider);
            }
            var report=modelA.validate();

            //Check if the validation check has failed
            if((report)&&(report.failed)){
                msg['ok']=false;
                msg['report']=report;
                print(msg);
                log.debug(msg);
                return;
            }


            modelA.set('*.id', id);

            modelB.import('asset', originalArtifact);

            //Checks whether two models are equal
            var reqProps=['overview.name', 'overview.provider', 'overview.version']

            var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

            //If they are not equal,abort the operation
            if (!isEqual) {
                log.debug('trying to get fields which are different');
                var diff=modelManager.diff(modelA,modelB,reqProps);
                response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                        +' were modified: '+diff);
                return;
            }
            modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
            var artifact = modelA.export('asset.exporter');

            dataInjector.inject(artifact,DataInjectorModes.UPDATE);

            artifactManager.update(artifact);

            // dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

            msg['ok']=true;
            msg['message']='asset updated';
            msg['asset']=artifact;
            print(msg);

        } catch (e) {
            log.debug(e);
            print({"ok" : false, "message" : "Permission denied", "report" : {"failed" : true, "name" : ["You are not allowed to edit at this stage"]}});
            log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
            // response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
        }

    }



    /******************************END_MOBILE***************************************************/




    var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

    var sm=securityModule.cached();

//This will short circuit the handling of the requests
    var passed=sm.check(session,function(){
        response.sendError(401);

    });

//Stop servicing the request if the check failed
    if(passed){

        var user=require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);

        //var routeManager=application.get(config.app.ROUTE_MANAGER);
        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var dataInjector=publisher.dataInjector;
        var DataInjectorModes=publisher.DataInjectorModes;
        var filterManager=publisher.filterManager;
        var storageModule = require('/modules/data/storage.js').storageModule();
        var storageConfig = require('/config/storage.json');
        var utility = require('/modules/utility.js').rxt_utility();
        var log=new Log();

        routeManager.handle(request, response);
    }

}, request, response, session);






function url_reg(){
    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url_reg.arguments[0]);
}



%>
