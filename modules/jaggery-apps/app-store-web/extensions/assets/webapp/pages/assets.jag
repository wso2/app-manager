<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var AuthService;
var authenticator;
var caramel;

include('../modules/jagg/jagg.jag');

require('/modules/store.js').exec(function (ctx) {
    var options, assets, paging, current, total, url, mainPage, subPage, title, selectedCategory, key,
            log = ctx.log,
            sso = ctx.sso,
            query = ctx.params.query,
            tag = ctx.params.tag,
            store = ctx.store,
            user = ctx.user,
            server = ctx.server,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            search = require('/modules/search.js'),
            subscriptions = {},
            subscription = false,
            isSubscribed = false,
            avaliablePages;

    caramel = require('caramel');
    process = require('process'),
    localIP = "https://" + process.getProperty('server.host'),
    httpsPort = process.getProperty('https.port');
        
    url = '/assets/' + type + '/?' + (tag ? 'tag=' + tag + '&' : '') + (query ? 'query=' + query + '&' : '');
    avaliablePages = store.getAvailablePages(type,ctx.request,ctx.session);
    paging = store.assetsPagingOverrided(request,avaliablePages);

    mainPage = type;
    title = store.assetLinks(type).title;

    var indices = store.pageIndexPopulator(avaliablePages,paging.start+1);
    var PAGE_SIZE = store.getPageSize();
    var pageIndices;
    if(indices.length > 1){
        pageIndices = indices;
    }

    var currIndex = paging.start + 1;

    var currentPage = store.getCurrentPage(currIndex);
    //currentPage = parseInt(currentPage, 10);

    if(currentPage-1 > 0){
        var leftnav = currentPage-1;
    }

    if(currentPage+1 <= avaliablePages){
        var rightnav = currentPage+1;
    }


    if (user) {
        subscriptions = store.subscriptions(type);
        if (subscriptions[type]) {
            var count = Object.keys(subscriptions[type]).length;
            if (count == 0) {
                subscriptions[type] = {};
            } else {
                subscription = true;
            }
        }
    }


    // Init subscription service.
    var subscriptionServiceModule = require('/extensions/assets/webapp/services/subscription.js').serviceModule;
    var subscriptionService = new subscriptionServiceModule.SubscriptionService();
    subscriptionService.init(jagg, session);

    var getSubscriptionInfo = function (asset) {

        // Get the enterprise subscription the individual subscription for this user for this app.
        var appInfo = {};
        appInfo["name"] = asset.attributes.overview_name;
        appInfo["version"] = asset.attributes.overview_version;
        appInfo["provider"] = asset.attributes.overview_provider;

        var defaultApplicationName = "DefaultApplication";

        var enterpriseSubscription;
        if (authenticator.getLoggedInUser()) {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", authenticator.getLoggedInUser().username).subscription;
        }
        else {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", null).subscription;
        }

        var individualSubscription;
        if (authenticator.getLoggedInUser()) {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", authenticator.getLoggedInUser().username).subscription;
        }
        else {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", null).subscription;
        }


        // Get all available IDPs (enterprises)
        var enterprises = getEnterprises(asset);

        var subscriptionInfo = {};

        subscriptionInfo["enterpriseSubscription"] = enterpriseSubscription;
        subscriptionInfo["individualSubscription"] = individualSubscription;
        subscriptionInfo["enterprises"] = enterprises;
        subscriptionInfo["viewData"] = getSubscriptionViewData(enterpriseSubscription, enterprises);

        return subscriptionInfo;

    }

    // Returns HBS friendly subscription info.
    var getSubscriptionViewData = function (enterpriseSubscription, enterprises) {

        var viewData = new Array();

        if (!enterprises) {
            return viewData;
        }

        // Create a Set of trusted IDPs in the enterprise subscription.
        var trustedIdpsSet = {};

        if (enterpriseSubscription) {

            var trustedIdps = JSON.parse(enterpriseSubscription.trustedIdps);

            for (var i = 0; i < trustedIdps.length; i++) {
                trustedIdpsSet[trustedIdps[i]] = true;
            }
        }

        for (var i = 0; i < enterprises.length; i++) {
            var viewEntry = {};
            viewEntry["enterprise"] = enterprises[i];
            viewEntry["subscribed"] = enterprises[i] in trustedIdpsSet;
            viewData.push(viewEntry);
        }

        return viewData;
    }

    var getEnterprises = function (asset) {
        var store = jagg.module("manager").getAPIStoreObj();
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        var appName = asset.attributes.overview_name;
        var appVersion = asset.attributes.overview_version;
        var appProvider = asset.attributes.overview_provider;
        var result = null;
        var issuerName = null;
        var store = jagg.module("manager").getAPIStoreObj();
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        //Check whether application author is a tenant
        if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
            result = appProvider.split("-AT-");
        }
        if (result != null) {
            issuerName = appName + "-" + result[1] + "-" + appVersion;
        } else {
            issuerName = appName + "-" + appVersion;
        }

        var ssoProviderInfo = asset.attributes.sso_ssoProvider.split("-");


        var authResult = subscriptionService.getEnterprisesForApplication(
                {appName: issuerName, ssoProviderName: ssoProviderInfo[0], ssoProviderVersion: ssoProviderInfo[1]});

        return authResult.enterprises;

    }
    
    if (tag) {
        subPage = '/ Tag: "' + tag + '"';
        assets = store.tagged(type, tag, paging);
    } else if (query) {
        query = require('/modules/search.js').build(query);
        options = {
            type: type,
            attributes: query
        };
        for (key in query) {
            if (query.hasOwnProperty(key) && key === 'overview_category') {
                selectedCategory = query[key];
            }
        }
        subPage = '/ Search: "' + query + '"';
        assets = store.search(options, paging);
    } else {
        if (paging.sort == 'popular') {
            server.privileged(function () {
                //TODO:  move to a module.
                var tenantDomain = user ? user.tenantDomain : "carbon.super";
                var index = 0, maxTry = 0;
                var getNextassetSet = function () {
                    var db = new Database('SOCIAL_CACHE');
                    var result = db.query("SELECT ID FROM SOCIAL_CACHE WHERE TYPE='" + type.replace(/\W/g, '') + "' AND " +
                            "TENANT='" + tenantDomain + "' ORDER BY RATING DESC LIMIT " + (paging.start + index) + ","+PAGE_SIZE);
                    db.close();
                    index += store.getPageSize();;
                    return result;
                };
                assets = [];
                var pos, aid, asset;
                while (assets.length < PAGE_SIZE && maxTry < 10) {
                    maxTry++;
                    var result = getNextassetSet();
                    for (var n = 0; n < result.length && assets.length < PAGE_SIZE; n++) {
                        var combinedAid = String(result[n].ID);
                        pos = combinedAid.indexOf(':');
                        aid = combinedAid.substring(pos + 1);
                        try {
                            asset = store.asset(type, aid);
                            asset.indashboard = store.isuserasset(aid, type);
                            if (configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) >= 0) {
                                assets.push(asset);
                            }
                        } catch (e) {
                            log.warn("error retrieving asset from store ,information might be stale in social cache. id=" +
                                    combinedAid);
                        }
                    }
                }
            });

        }
        else if (paging.sort == 'usage') {
            server.privileged(function () {
                var userName = user ? user.username : "";
                var index = 0, maxTry = 0;
                var getNextassetSet = function () {
                    var appMgtDaoService = Packages.org.wso2.carbon.appmgt.impl.dao.AppMDAO;
                    var appMgtDaoObj = new appMgtDaoService();

                    var result = appMgtDaoObj.getAppsByHitCount(userName, (paging.start + index), 12);
                    if (log.isDebugEnabled()) {
                        log.debug("Query executed successfully to get the assets hit count");
                    }
                    index += 12;
                    return JSON.parse(result);
                };

                assets = [];
                var aid, asset;
                while (assets.length < 12 && maxTry < 10) {
                    maxTry++;
                    var result = getNextassetSet();
                    for (var n = 0; n < result.length && assets.length < 12; n++) {
                        aid = String(result[n].UUID);
                        try {
                            asset = store.asset(type, aid);
                            asset.indashboard = store.isuserasset(aid, type);
                            if (configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) >= 0) {
                                assets.push(asset);
                            }
                        } catch (e) {
                            log.warn("error retrieving asset from store ,information might be stale in table. id=" +
                            aid);
                        }
                    }
                }
            });
        }
        else {
            assets = store.assets(type, paging);
        }
    }

    var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);
    AuthService=require(getServiceDir('authentication.js')).serviceModule;
    authenticator=new AuthService.Authenticator();
    authenticator.init(jagg,session);
    user=authenticator.getLoggedInUser();


    var subscriptionInfo;
    assets.forEach(function (asset) {
        //set subscription details for each asset
        subscriptionInfo = getSubscriptionInfo(asset)
        if (subscriptionInfo.individualSubscription) {
            if (subscriptionInfo.individualSubscription.subscriptionStatus === "UNBLOCKED") {
                isSubscribed = true;
                subscriptionInfo.individualSubscription["OnHold"] = false;
            } else if (subscriptionInfo.individualSubscription.subscriptionStatus === "ON_HOLD") {
                subscriptionInfo.individualSubscription["OnHold"] = true;
            } else {
                subscriptionInfo.individualSubscription["OnHold"] = false;
            }
        }
        asset.isSubscribed = isSubscribed;

        //to support skip gateway label visibility
        if (asset.overview_skipGateway == "true") {
            asset.overview_skipGateway = true;
        }
        else {
            asset.overview_skipGateway = false;
        }
    });

    caramel.render({
        title: 'Store | Assets',
        user: user,
        sso: sso,
        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),
        navigation: site.navigation(tenantId),
        search: {
            mainPage: mainPage,
            subPage: subPage,
            isTopAssets: false,
            searchFields: search.fields()
        },
        type: type,
        selectedCategory: selectedCategory,
        tags: function () {
            return [
                {
                    url: '/assets/' + type + '/?tag=',
                    data: store.tags(type)
                }
            ];
        },
        config:{
			localIP : localIP,
			httpsPort : httpsPort
        },
        assets: assets,
        paging: {
            url: url + 'sort=' + paging.sort + '&page=',
            sort: paging.sort,
            tag: tag,
            size: assets.length
        },
        sorting: {
            url: url + 'sort='
        },

        myAssets : { user:user, type: type, title: title, subscriptions: subscriptions[type], subscription : subscription, pageIndices : pageIndices, leftNav:leftnav, rightNav:rightnav},
        recentAssets: store.recentAssets(type)

    });
}, request, response, session);

function getServiceDir(serviceName) {
    return '../services/' + serviceName;
}

%>

