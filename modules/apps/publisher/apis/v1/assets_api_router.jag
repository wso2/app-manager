<%

require('/modules/publisher.js').exec(function(ctx) {

	var config = require('/config/publisher.json');
	var caramel = require('caramel');

	var router = require('/modules/router-g.js').router();
	var routeManager = new router.Router();

	var appmgtPublisher = require('appmgtpublisher');

	var log = new Log();

	routeManager.register('POST', 'publisher', '/publisher/api/assets/{operation}/{type}/{action}/', function (context) {
		var type = context.params.type;
		var action = context.params.action;

		var server  = require('store').server;
		var username = server.current(session).username;
		var tenantId = server.current(session).tenantId;
		var startDate = context.post.startDate;
		var endDate = context.post.endDate;

		var appMgtProviderObj = new appmgtPublisher.APIProvider(stringify(username));


		//manipulate endDate to overcome date-picker issue
		var date = new Date(Date.parse(endDate.replace(/-/g,"/")));
		date.setDate(date.getDate() + 1);
		// The getMonth() method returns the month (from 0 to 11) for the specified date
		date.setMonth(date.getMonth() + 1);
		endDate = date.getFullYear()+'-'+date.getMonth()+'-'+date.getDate();

		var artifactManager = rxtManager.getArtifactManager(type);
		var model = modelManager.getModel(type);
		var artifact ;

		var usage = [];
		var obj, result;

		/* Web Application Last Access Time Graph */
		if (action == "getSubscriberCountByAPIs") {
			//output = stats.getHotAssetStats(startDate,endDate,tenantId);
			usage = appMgtProviderObj.getSubscriberCountByAPIs("__all_providers__",startDate,endDate);
			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					usage:usage
				};
			}
			print(usage);
		} else  if (action == "getSubscribedAPIsByUsers") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getSubscribedAPIsByUsers("__all_providers__",startDate,endDate);
			var output = [];
			var users = [];
			for(i=0;i<usage.length;i++){
				if(users.indexOf(usage[i].user) == -1){
					users.push(usage[i].user);
				}
			}


			for(j=0;j<users.length;j++){
				var apps = [];
				for(i=0;i<usage.length;i++){
					if(usage[i].user == users[j])
					{
						apps.push(usage[i].apiName);
					}
				}

				var user = {
				};
				user['user'] = 	users[j];
				user['apps'] = apps;
				output.push(user);

			}

			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					output:output
				};
			}

			print(output);
		}else if (action == "getAPIUsageByUser") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getAPIUsageByUser("__all_providers__",startDate,endDate);

			usage = parse(stringify(usage));
				
			function orderByCountAscending(a, b) {
				return b.count - a.count;
			}

			usage = usage.sort(orderByCountAscending);

			var webapps = [];

			for(x=0;x<usage.length;x++){
					
				var webappIndex = -1;
				var webappVersionIndex = -1;

				for(y=0;y<webapps.length;y++){
					if(webapps[y][0] == usage[x].apiName){

						webappIndex = y;
						var z;
						for(z=0;z<webapps[y][1].length;z++){
							if(webapps[y][1][z][0] == usage[x].version){
								webappVersionIndex = z;

								break;
							}
						}
							
						if((webappVersionIndex == -1) && (z == webapps[y].length)){
							break;
						}
					}
				}

				if(webappIndex == -1){
					var version = [];
					var requestCount = [];
					requestCount.push([usage[x].userId,usage[x].count.toString()]);
					version.push([usage[x].version,requestCount]);
					webapps.push([usage[x].apiName,version]);


				}else{

					if(webappVersionIndex == -1){
						var requestCount = [];
						requestCount.push([usage[x].userId,usage[x].count.toString()]);
						webapps[webappIndex][1].push([usage[x].version,requestCount]);
					}
					else{

						webapps[webappIndex][1][webappVersionIndex][1].push([usage[x].userId,usage[x].count.toString()]);
					}
				}
					
			}


			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					webapps:webapps
				};
			}

			print(webapps);
		}else if (action == "getAPIResponseTime") { /* Overall Web Application Usage Graph */
			var output  = {
			};
			var apinameData = [],serviceTimeData=[],webApps = [];
			usage = appMgtProviderObj.getProviderAPIServiceTime("__all_providers__",startDate,endDate);


			usage = parse(stringify(usage));

			function SortByName(x,y) {
				return ((x.apiName == y.apiName) ? 0 : ((y.apiName > x.apiName) ? 1 : -1 ));
			}

			usage  = usage.sort(SortByName);

			for(i=0;i<usage.length;i++){
				webApps.push([i,usage[i].apiName]);
				apinameData.push([i,usage[i].referer]);
				serviceTimeData.push([parseInt(usage[i].serviceTime),i]);
			}

			var webapps = [];

			for(x=0;x<usage.length;x++){

				var webappIndex = -1;
				var webappVersionIndex = -1;
				
				for(y=0;y<webapps.length;y++){
					if(webapps[y][0] == usage[x].apiName){
							
						webappIndex = y;
						break;
					}
				}
				
			
				if(webappIndex == -1){

					var page = [];
					page.push([usage[x].referer,usage[x].serviceTime.toString()]);
					webapps.push([usage[x].apiName,page]);


				}else{
					webapps[webappIndex][1].push([usage[x].referer,usage[x].serviceTime.toString()]);

				}

			}

			output['webapps'] = webapps;
			output['referer'] = apinameData;
			output['serviceTime'] = serviceTimeData;



			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					output:output
				};
			}

			print(output);
		}else if (action == "getAPIUsageByPage") { /* Overall Web Application Usage Graph */
			usage = appMgtProviderObj.getAPIUsageByPage("__all_providers__",startDate,endDate);

			var webapps = [];
			var webappIndex = -1;
			var webappDetailsIndex = -1;

			var totalPageCount = [];

			var webappObject = {
			};

			var appPage = [];
			var apppageCount = [];

			var webappDeatails = [];

			for(x=0;x<usage.length;x++){

				for(y=0;y<webapps.length;y++){

					if(webapps[y][1] == usage[x].apiName){
						webappIndex = y;
						break;
					}
				}

				if(webappIndex == -1){
					var index = webapps.length;
					webapps.push([index,usage[x].apiName]);
					totalPageCount.push([index,usage[x].count]);
				}else {
					var total = totalPageCount[webappIndex][1] + usage[x].count ;
					totalPageCount[webappIndex][1] = total;
				}


				for(z=0;z<webappDeatails.length;z++){
					if(webappDeatails[z][0] == usage[x].apiName){
						webappDetailsIndex = z;
						break;
					}
				}

				if(webappDetailsIndex == -1){
					var referer =[];
					var pageCount = [];
					var index = webappDeatails.length;
					referer.push([index, usage[x].referer]);
					pageCount.push([usage[x].count,index]);
					webappDeatails.push([usage[x].apiName,referer,pageCount]);
				}
				else{
					var index = webappDeatails[webappDetailsIndex][1].length;

					webappDeatails[webappDetailsIndex][1].push([index,usage[x].referer]);
					webappDeatails[webappDetailsIndex][2].push([usage[x].count,index]);
				}

			}

			webappObject['usage'] = usage;
			webappObject['webapp'] = webapps;
			webappObject['totalPageCount'] = totalPageCount;
			webappObject['webappDeatails'] = webappDeatails;


			if (usage == null) {
				obj = {
					error:true
				};

			} else {
				obj = {
					error:false,
					webappObject:webappObject
				};
			}

			print(webappObject);
		}

	});



		var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

		var sm=securityModule.cached();

		//This will short circuit the handling of the requests
		var passed=sm.check(session,function(){
			response.sendError(401);
		});

			//Stop servicing the request if the check failed
			if(passed){

				var user = require('store').user;
				var publisher = require('/modules/publisher.js').publisher(request, session);
				var stats = require('/modules/statistics.js');

				//var routeManager=application.get(config.app.ROUTE_MANAGER);
				var rxtManager = publisher.rxtManager;
				var modelManager = publisher.modelManager;

				routeManager.handle(request, response);
			}

}, request, response, session);
%>
