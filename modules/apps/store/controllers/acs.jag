<%
include('/extensions/assets/webapp/modules/jagg/jagg.jag');

var storeHostObj = jagg.module("manager").getAPIStoreObj();

(function () {
    var log = new Log(),
            configs = require('/config/store.json'),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
            relayState = request.getParameter('RelayState'),
            sso = require('sso'),
            samlRespObj,
            keyStoreProps = {
                KEY_STORE_NAME: process.getProperty('carbon.home') + configs.ssoConfiguration.keyStoreName,
                KEY_STORE_PASSWORD: configs.ssoConfiguration.keyStorePassword,
                IDP_ALIAS: configs.ssoConfiguration.identityAlias
            },
            sso_sessions = application.get('sso_sessions');

   var AuthService=require('../extensions/assets/webapp/services/authentication.js').serviceModule;
   var authenticator=new AuthService.Authenticator();
   authenticator.init(jagg,session);


    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    if (samlResponse != null) {
        samlRespObj = sso.client.getSamlObject(samlResponse);
        if (!sso.client.isLogoutResponse(samlRespObj)) {

            // validating the signature
            if (configs.ssoConfiguration.responseSigningEnabled) {

                if (sso.client.validateSignature(samlRespObj, keyStoreProps)) {
                    var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);
                    var username = sessionObj.loggedInUser;                                   

                    if (sessionObj.sessionIndex != null || sessionObj.sessionIndex != 'undefined') {
                    	
                        session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
                        session.put("Loged", "true");
                        
                        username = username + "";
                        var userDetails={};
                        userDetails['username']=username;
                        userDetails['action']="SSOLogin";
                        authResult=authenticator.login(userDetails);
                        sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;

                        var isSubscriberRoleAttached = storeHostObj.checkIfSubscriberRoleAttached(username);
                        var role=null;

                        if(!isSubscriberRoleAttached.error) {
                            role = require('/modules/role.js').checkeRole(username, session);
                        }
                        if(role){
                        	var user = require('store').user;
                            log.debug('user is set :::' + sessionObj.loggedInUser);

                        	response.sendRedirect(relayState);

						
                        } else {
                        	log.warn('User '+sessionObj.loggedInUser+' does not have permission to access the publisher application. Make sure the user has the store role.');
                        	response.sendError(401,'You do not have permission to login to this application.Please contact your administrator and request permission.');
                        	                        	
                        }                        
                    }
                }
            }

        } else {
            session.invalidate();
            response.sendRedirect('/store');
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
        log.debug('BACKEND LOGOUT RECIEVED FROM STORE THE INDEX IS ######' + index);
	var jSessionId = application.get('sso_sessions')[index];
	delete application.get('sso_sessions')[index];
	log.debug('store Session Id :::' + jSessionId);
	session.invalidate();
    }
}());
%>
